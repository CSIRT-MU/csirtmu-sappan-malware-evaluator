version: "3.7"
services:
  ## Volume container
    data:
        image: busybox
        volumes:
            - blockers:/var/blockers
            - whitelist:/var/whitelist
            - dnsrpz:/var/dnsrpz
            - airflow:/var/airflow/app
            - database_data:/var/postgresql/data
            - database_run:/var/postgresql/run
            - database_tmp:/var/postgresql/tmp
            - intelowl_generic_logs:/var/intelowl/generic_logs
            - intelowl_nginx_logs:/var/intelowl/nginx_logs
            - intelowl_shared_files:/var/intelowl/shared_files
            - intelowl_static_files:/var/intelowl/static_files
            - gateway_frontend_build:/var/gateway_frontend/
            - misp_logs:/var/misp/logs
            - misp_files:/var/misp/files
            - mysql_data:/var/mysql/data
          
# based on files from https://github.com/mattermost/mattermost-docker/tree/master/db
    database:
        build:
            context: database
        networks:
            - malware-service
        read_only: true
        restart: unless-stopped
        depends_on:
            - data
        volumes:
            - database_data:/var/lib/postgresql/data
            - database_run:/var/run/postgresql
            - database_tmp:/tmp
            - ./create-multiple-postgresql-databases.sh:/docker-entrypoint-initdb.d/create-multiple-postgresql-databases.sh
        environment:
            - POSTGRES_MULTIPLE_DATABASES=$MM_DBNAME,$AIRFLOW_DBNAME,$OPENPROJECT_DBNAME, $INTELOWL_DBNAME, $NETFLOW_DBNAME
        env_file:
            - .env
        healthcheck:
            test: pg_isready -U $$POSTGRES_USER
            timeout: 30s
            interval: 10s
            retries: 5

    blockers:
        build:
            context: api_mocks/blocker-server-mock
        restart: unless-stopped
        networks:
            - malware-service
        ports:
            - 8996:8080
        volumes:
            - blockers:/usr/src/app/data

    dnsrpz:
        build:
            context: api_mocks/dnsrpz-server-mock
        restart: unless-stopped
        networks:
            - malware-service
        ports:
            - 8997:8080
        volumes:
            - dnsrpz:/usr/src/app/data

    whitelist:
        build:
            context: api_mocks/whitelist-server-mock
        restart: unless-stopped
        networks:
            -  malware-service
        ports:
            - 8998:8080
        volumes:
            - whitelist:/usr/src/app/data

    ## Airflow web service
    airflow:
        image: apache-airflow-malware
        build:
            context: airflow
            args:
            - AIRFLOW_HOME=${AIRFLOW_HOME}
        networks:
            - malware-service
        ports:
            - "8999:8080"
        depends_on:
            - database
            - redis
        restart: unless-stopped
        env_file:
            - .env
            - ./airflow/.env
        volumes:
            - airflow:$AIRFLOW_HOME
            - ./airflow/dags:$AIRFLOW_HOME/dags
            - ./airflow/plugins:$AIRFLOW_HOME/plugins
            - ./airflow/airflow.cfg:$AIRFLOW_HOME/airflow.cfg:ro
        entrypoint:
            - /bin/bash
            - -c
            - ${AIRFLOW_HOME}/wait-for-database.sh && ${AIRFLOW_HOME}/airflow-entrypoint.sh

    ## Airflow task scheduler
    airflow-scheduler:
        image: apache-airflow-malware
        networks:
            - malware-service
        depends_on:
            - database
            - airflow
        restart: unless-stopped
        env_file:
            - .env
            - ./airflow/.env
        volumes:
            - airflow:$AIRFLOW_HOME
            - ./airflow/dags:$AIRFLOW_HOME/dags
            - ./airflow/plugins:$AIRFLOW_HOME/plugins     
            - ./airflow/airflow.cfg:$AIRFLOW_HOME/airflow.cfg:ro
        entrypoint: 
          - /bin/bash
          - -c
          - ${AIRFLOW_HOME}/wait-for-database.sh && airflow scheduler

    redis:
        image: redis:alpine3.14
        networks:
            - malware-service
        env_file:
            - .env
        command: redis-server --requirepass $REDIS_PASSWORD

### S3

    minio:
        build:
            context: minio
        networks:
            - malware-service
        restart: unless-stopped
        ports:
            - 9000:9000
            - 9001:9001
        env_file:
            - ./minio/.env
        entrypoint: ["minio", "server", "/data", "--console-address", ":9001"]
    
    minio-client:
        build:
            context: minio
            dockerfile: Dockerfile_client
        networks:
            - malware-service
        restart: unless-stopped
        env_file:
            - ./minio/.env
        depends_on: 
            - minio
            - gateway-backend

### OBSERVABLE EVALUATOR
    observable-evaluator:
        build:
            context: observable-evaluator
            dockerfile: Dockerfile
        restart: unless-stopped
        networks:
            - malware-service
        ports:
            - 9002:8000
        env_file:
            - ./observable-evaluator/.env
        depends_on: 
            - intelowlapp
            - intelowl
            - rabbitmq
            - celery_worker_default
            - celery_beat

    intelowlapp:
        build:
            context: intelowl
            dockerfile: Dockerfile
        restart: unless-stopped
        networks:
            - malware-service
        volumes:
            - ./intelowl/intel_owl.ini:/etc/uwsgi/sites/intel_owl.ini 
            - ./intelowl/analyzer_config.json:/opt/deploy/configuration/analyzer_config.json
            - ./intelowl/ldap_config.py:/opt/deploy/configuration/ldap_config.py
            - intelowl_generic_logs:/var/log/intel_owl
            - intelowl_shared_files:/opt/deploy/files_required
            - intelowl_static_files:/opt/deploy/intel_owl/static
        entrypoint: 
            - /opt/deploy/entrypoint.sh 
            - app
        env_file:
            - ./intelowl/.env
            - .env_keys
            - .env
        environment: 
            - DB_HOST=${POSTGRES_HOSTNAME}
            - DB_USER=${POSTGRES_USER}
            - DB_PASSWORD=${POSTGRES_PASSWORD}
            - DB_PORT=5432
        depends_on: 
            - database

    intelowl:
        build:
            context: intelowl
            dockerfile: Dockerfile_nginx
        restart: unless-stopped
        networks:
            - malware-service
        volumes:
            - ./intelowl/nginx_errors.conf:/etc/nginx/nginx_errors.conf
            - ./intelowl/nginx_http.conf:/etc/nginx/conf.d/default.conf
            - intelowl_nginx_logs:/var/log/nginx
            - intelowl_static_files:/var/www/static
        ports:
            - 9003:80
            - 9004:443
        depends_on: 
            - intelowlapp
        
    rabbitmq:
        image: library/rabbitmq:3.8-alpine
        container_name: intelowl_rabbitmq
        networks:
            - malware-service
        logging:
            driver: none

    celery_beat:
        build:
            context: intelowl
            dockerfile: Dockerfile
        container_name: intelowl_celery_beat
        restart: unless-stopped
        networks:
            - malware-service
        volumes:
            - ./intelowl/analyzer_config.json:/opt/deploy/configuration/analyzer_config.json
            - intelowl_generic_logs:/var/log/intel_owl
            - intelowl_shared_files:/opt/deploy/files_required
        env_file:
            - ./intelowl/.env
            - .env_keys
            - .env
        depends_on:
            - rabbitmq
            - database
        environment: 
            - DB_HOST=${POSTGRES_HOSTNAME}
            - DB_USER=${POSTGRES_USER}
            - DB_PASSWORD=${POSTGRES_PASSWORD}
            - DB_PORT=5432
        entrypoint:
            - /opt/deploy/entrypoint.sh 
            - celery-beat  
            
    celery_worker_default:
        build:
            context: intelowl
            dockerfile: Dockerfile
        networks:
            - malware-service
        container_name: intelowl_celery_worker_default
        restart: unless-stopped
        stop_grace_period: 3m
        volumes:
            - ./intelowl/analyzer_config.json:/opt/deploy/configuration/analyzer_config.json
            - intelowl_generic_logs:/var/log/intel_owl
            - intelowl_shared_files:/opt/deploy/files_required
        logging:
            driver: "json-file"
            options:
                max-file: "5"
                max-size: "10m"
        env_file:
            - ./intelowl/.env
            - .env_keys
            - .env
        depends_on:
            - rabbitmq
            - database
        environment: 
            - DB_HOST=${POSTGRES_HOSTNAME}
            - DB_USER=${POSTGRES_USER}
            - DB_PASSWORD=${POSTGRES_PASSWORD}
            - DB_PORT=5432
        entrypoint:
            - /opt/deploy/entrypoint.sh
            - celery-worker

### GATEWAY
    
    gateway-backend:
        build:
            context: gateway/malware-use-case-gateway-backend
            dockerfile: Dockerfile
        env_file:
            - .env
            - ./gateway/malware-use-case-gateway-backend/.env
        networks:
            - malware-service
        restart: unless-stopped
        ports:
            - "9005:9005"

    build_gateway_frontend:
        build:
            context: gateway/malware-use-case-gateway-frontend
            dockerfile: Dockerfile
            args:
                - REACT_APP_GATEWAY_HOST=${REACT_APP_GATEWAY_HOST}
                - REACT_APP_GATEWAY_PORT=${REACT_APP_GATEWAY_PORT}
        networks:
            - malware-service
        volumes:
            - gateway_frontend_build:/usr/src/app/build

    gateway-nginx:
        image: nginx
        volumes:
            - ./gateway/nginx_templates/:/etc/nginx/templates
            - gateway_frontend_build:/var/www/gateway
        ports:
            - "9006:9006"
        networks:
            - malware-service
        restart: unless-stopped
        environment:
            - NGINX_HOST=gateway-nginx
            - NGINX_PORT=9006
        command: [nginx-debug, '-g', 'daemon off;']


### MISP https://github.com/coolacid/docker-misp
    mail:
        image: namshi/smtp
        networks: 
            - malware-service
    misp-db:
        image: mysql:8.0.19
        command: --default-authentication-plugin=mysql_native_password
        restart: always
        networks:
            - malware-service
        env_file:
            - ./misp/.env
        volumes:
          - mysql_data:/var/lib/mysql
        cap_add:
          - SYS_NICE  # CAP_SYS_NICE Prevent runaway mysql log        
        depends_on: 
          - data

    misp:
        build:
            context: misp
        networks:
            - malware-service
        ports:
            - 9007:80
            - 9008:443
        volumes:
            - misp_logs:/var/www/MISP/app/tmp/logs/
            - misp_files:/var/www/MISP/app/files
        env_file:
            - ./misp/.env
        restart: unless-stopped
        depends_on:
            - misp-redis
            - misp-db

    misp-redis:
        image: redis:alpine3.14
        networks:
            - malware-service
        env_file:
            - .env
        command: redis-server    
    
    misp-modules:
        build:
            context: misp
            dockerfile: Dockerfile_modules
        environment:
            - "REDIS=misp-redis"
        env_file:
            - .env
        depends_on:
            - misp-redis
            - misp-db

    ## ONLY FOR SIMPLICITY
    misp-create-user:
        build:
            context: misp
        networks:
            - malware-service
        env_file:
            - ./misp/.env
        entrypoint:
            - sh
            - /opt/create-user.sh
        depends_on:
            - misp

### default gateway

networks:
    malware-service:
        name: malware-service
    
volumes:
    blockers:
    whitelist:
    dnsrpz:        
    airflow:        
    database_data:        
    database_run:        
    database_tmp:        
    intelowl_generic_logs:        
    intelowl_shared_files:        
    intelowl_static_files:        
    intelowl_nginx_logs:        
    gateway_frontend_build:
    misp_files:
    misp_logs:
    mysql_data:
