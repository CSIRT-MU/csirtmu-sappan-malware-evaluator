from swagger_server.models.email import Email
import json
from swagger_server.models.ip import IP

class StorageOperator:
    ip_file = "/usr/src/app/data/ip.json"
    email_file = "/usr/src/app/data/email.json"

    def get_ip_bans(self):
        ips = []
        data = ""
        with open(self.ip_file, "r") as db:
            try:
                data = json.load(db)
            except:
                print("Can't open the damn file")
                return {"count": len(ips), "results": ips}
        for record in data.values():
            ips.append(IP.from_dict(record))
        return {"count": len(ips), "results": ips}


    def ban_ip(self, ip):
        data = {}
        with open(self.ip_file, "r") as db:
            try:
                data = json.load(db)
            except:
                pass
        if (not ip.ip in data):
            data[str(ip.ip)] = {"ip": ip.ip, "reason": ip.reason, "listed": ip.listed, "expires": ip.expires, "who": ip.who, "category": ip.category}
        with open(self.ip_file, "w") as db:
            json.dump(data, db)

    def unban_ip(self, ip):
        data = {}
        with open(self.ip_file, "r") as db:
            try:
                data = json.load(db)
            except:
                return
            if (ip.ip in data):
                data.pop(ip.ip)
                with open(self.ip_file, "w") as db:
                   json.dump(data, db)

    def get_email_bans(self):
        data = ""        
        emails = []
        with open(self.email_file, "r") as db:
            try:
                data =  json.load(db)
            except:
                return {"count" : len(emails), "results" : emails}
        for record in data.values():
            emails.append(Email.from_dict(record))
        return {"count" : len(emails), "results" : emails}
        
    def ban_email(self, email):
        data = {}
        with open(self.email_file, "r") as db:
            try:
                data = json.load(db)
            except:
                pass
        if (not email.email in data):
            data[str(email.email)] = {"email": email.email, "reason": email.reason, "listed": email.listed, "expires": email.expires, "who": email.who, "direction": email.direction}
        with open(self.email_file, "w") as db:
            json.dump(data, db)

    def unban_email(self, email):
        data = {}
        with open(self.email_file, "r") as db:
            try:
                data = json.load(db)
            except:
                return
            if (email.email in data):
                data.pop(email.email)
                with open(self.email_file, "w") as db:
                   json.dump(data, db)



