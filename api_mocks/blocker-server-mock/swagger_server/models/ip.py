# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class IP(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, expires: datetime=None, ip: str=None, listed: datetime=None, reason: str=None, who: str=None):  # noqa: E501
        """IP - a model defined in Swagger

        :param category: The category of this IP.  # noqa: E501
        :type category: str
        :param expires: The expires of this IP.  # noqa: E501
        :type expires: datetime
        :param ip: The ip of this IP.  # noqa: E501
        :type ip: str
        :param listed: The listed of this IP.  # noqa: E501
        :type listed: datetime
        :param reason: The reason of this IP.  # noqa: E501
        :type reason: str
        :param who: The who of this IP.  # noqa: E501
        :type who: str
        """
        self.swagger_types = {
            'category': str,
            'expires': datetime,
            'ip': str,
            'listed': datetime,
            'reason': str,
            'who': str
        }

        self.attribute_map = {
            'category': 'category',
            'expires': 'expires',
            'ip': 'ip',
            'listed': 'listed',
            'reason': 'reason',
            'who': 'who'
        }

        self._category = category
        self._expires = expires
        self._ip = ip
        self._listed = listed
        self._reason = reason
        self._who = who

    @classmethod
    def from_dict(cls, dikt) -> 'IP':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IP of this IP.  # noqa: E501
        :rtype: IP
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self) -> str:
        """Gets the category of this IP.


        :return: The category of this IP.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category: str):
        """Sets the category of this IP.


        :param category: The category of this IP.
        :type category: str
        """

        self._category = category

    @property
    def expires(self) -> datetime:
        """Gets the expires of this IP.


        :return: The expires of this IP.
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires: datetime):
        """Sets the expires of this IP.


        :param expires: The expires of this IP.
        :type expires: datetime
        """

        self._expires = expires

    @property
    def ip(self) -> str:
        """Gets the ip of this IP.


        :return: The ip of this IP.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip: str):
        """Sets the ip of this IP.


        :param ip: The ip of this IP.
        :type ip: str
        """

        self._ip = ip

    @property
    def listed(self) -> datetime:
        """Gets the listed of this IP.


        :return: The listed of this IP.
        :rtype: datetime
        """
        return self._listed

    @listed.setter
    def listed(self, listed: datetime):
        """Sets the listed of this IP.


        :param listed: The listed of this IP.
        :type listed: datetime
        """

        self._listed = listed

    @property
    def reason(self) -> str:
        """Gets the reason of this IP.


        :return: The reason of this IP.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason: str):
        """Sets the reason of this IP.


        :param reason: The reason of this IP.
        :type reason: str
        """

        self._reason = reason

    @property
    def who(self) -> str:
        """Gets the who of this IP.


        :return: The who of this IP.
        :rtype: str
        """
        return self._who

    @who.setter
    def who(self, who: str):
        """Sets the who of this IP.


        :param who: The who of this IP.
        :type who: str
        """

        self._who = who
