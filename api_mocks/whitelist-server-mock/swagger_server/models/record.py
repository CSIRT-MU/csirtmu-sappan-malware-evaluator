# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Record(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, ip: str=None, port_from: int=None, port_to: int=None, service: str=None, expiration: datetime=None, report_email: str=None, comment: str=None):  # noqa: E501
        """Record - a model defined in Swagger

        :param ip: The ip of this Record.  # noqa: E501
        :type ip: str
        :param port_from: The port_from of this Record.  # noqa: E501
        :type port_from: int
        :param port_to: The port_to of this Record.  # noqa: E501
        :type port_to: int
        :param service: The service of this Record.  # noqa: E501
        :type service: str
        :param expiration: The expiration of this Record.  # noqa: E501
        :type expiration: datetime
        :param report_email: The report_email of this Record.  # noqa: E501
        :type report_email: str
        :param comment: The comment of this Record.  # noqa: E501
        :type comment: str
        """
        self.swagger_types = {
            'ip': str,
            'port_from': int,
            'port_to': int,
            'service': str,
            'expiration': datetime,
            'report_email': str,
            'comment': str
        }

        self.attribute_map = {
            'ip': 'ip',
            'port_from': 'port_from',
            'port_to': 'port_to',
            'service': 'service',
            'expiration': 'expiration',
            'report_email': 'report_email',
            'comment': 'comment'
        }

        self._ip = ip
        self._port_from = port_from
        self._port_to = port_to
        self._service = service
        self._expiration = expiration
        self._report_email = report_email
        self._comment = comment

    @classmethod
    def from_dict(cls, dikt) -> 'Record':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Record of this Record.  # noqa: E501
        :rtype: Record
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip(self) -> str:
        """Gets the ip of this Record.


        :return: The ip of this Record.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip: str):
        """Sets the ip of this Record.


        :param ip: The ip of this Record.
        :type ip: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501

        self._ip = ip

    @property
    def port_from(self) -> int:
        """Gets the port_from of this Record.


        :return: The port_from of this Record.
        :rtype: int
        """
        return self._port_from

    @port_from.setter
    def port_from(self, port_from: int):
        """Sets the port_from of this Record.


        :param port_from: The port_from of this Record.
        :type port_from: int
        """

        self._port_from = port_from

    @property
    def port_to(self) -> int:
        """Gets the port_to of this Record.


        :return: The port_to of this Record.
        :rtype: int
        """
        return self._port_to

    @port_to.setter
    def port_to(self, port_to: int):
        """Sets the port_to of this Record.


        :param port_to: The port_to of this Record.
        :type port_to: int
        """

        self._port_to = port_to

    @property
    def service(self) -> str:
        """Gets the service of this Record.


        :return: The service of this Record.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service: str):
        """Sets the service of this Record.


        :param service: The service of this Record.
        :type service: str
        """

        self._service = service

    @property
    def expiration(self) -> datetime:
        """Gets the expiration of this Record.


        :return: The expiration of this Record.
        :rtype: datetime
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration: datetime):
        """Sets the expiration of this Record.


        :param expiration: The expiration of this Record.
        :type expiration: datetime
        """

        self._expiration = expiration

    @property
    def report_email(self) -> str:
        """Gets the report_email of this Record.


        :return: The report_email of this Record.
        :rtype: str
        """
        return self._report_email

    @report_email.setter
    def report_email(self, report_email: str):
        """Sets the report_email of this Record.


        :param report_email: The report_email of this Record.
        :type report_email: str
        """

        self._report_email = report_email

    @property
    def comment(self) -> str:
        """Gets the comment of this Record.


        :return: The comment of this Record.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this Record.


        :param comment: The comment of this Record.
        :type comment: str
        """

        self._comment = comment
