import datetime
from urllib.parse import unquote

from minio import Minio

from csirtmu.malware_gateway_backend.constants import REPORT_SUFFIX, MINIO_PORT, MINIO_HOST, MINIO_USER, MINIO_PASS


def get_filename_from_mino_key(key: str) -> str:
    return unquote(key.split('/')[-1])


def convert_filename_to_report_name(filename: str) -> str:
    return filename+REPORT_SUFFIX


def parse_minio_webhook_request(request_json) -> dict:
    return {
        'event': request_json['EventName'],
        'key': request_json['Key'],
        'bucket': request_json['Records'][0]['s3']['bucket'],
        'object': request_json['Records'][0]['s3']['object'],
        'user': request_json['Records'][0]['userIdentity'],
        'event_time': datetime.datetime.strptime(request_json['Records'][0]['eventTime'], '%Y-%m-%dT%H:%M:%S.%fZ')
    }


class Singleton(type):
    _instances = {}

    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]


class MinioClient(metaclass=Singleton):
    MINIO_SERVER = f'{MINIO_HOST}:{MINIO_PORT}'
    client: Minio = None

    def get_client(self) -> Minio:
        if not self.client:
            self.client = Minio(self.MINIO_SERVER, access_key=MINIO_USER,
                                secret_key=MINIO_PASS, secure=False
                                )
        return self.client
