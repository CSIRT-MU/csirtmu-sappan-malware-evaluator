from asyncio import Event
from io import BytesIO
from typing import Union
from urllib.parse import unquote

import starlette.datastructures
from starlette.applications import Starlette
from starlette.middleware import Middleware
from starlette.middleware.cors import CORSMiddleware
from starlette.requests import Request
from starlette.responses import PlainTextResponse, JSONResponse, StreamingResponse
from starlette.routing import Route, WebSocketRoute, Mount
from strawberry.asgi import GraphQL

from csirtmu.malware_gateway_backend.constants import MINIO_REPORT_BUCKET, MINIO_UPLOAD_BUCKET
from csirtmu.malware_gateway_backend.db import setup_database
setup_database('sqlite:///db.sqlite')

from csirtmu.malware_gateway_backend.models import CachedEvent, CachedObject
from csirtmu.malware_gateway_backend.schema import schema, events
from csirtmu.malware_gateway_backend.utils import MinioClient, get_filename_from_mino_key, \
    convert_filename_to_report_name


async def minio_hook(request: Request) -> Union[JSONResponse, PlainTextResponse]:
    if request.method.upper() == 'HEAD':
        return JSONResponse({}, status_code=201)
    else:
        response = await request.json()
        saved_event = CachedEvent.save_incoming_webhook(response)

        report_name = get_filename_from_mino_key(saved_event.key)
        if events.get(report_name):
            event = events[report_name]
            event['event'].set()
            event['result'] = saved_event.cached_object

        # Fetch all changes from remote
        CachedObject.refresh_object_cache_for_bucket(minio_client, MINIO_REPORT_BUCKET)

        return JSONResponse({'key': saved_event.key, 'event': saved_event.event, 'time': str(saved_event.time)}
                            , status_code=200)


async def minio_upload(request: Request):
    if request.method.upper() == 'POST':
        response = []

        form = await request.form()
        for name, form_obj in form.items():
            if isinstance(form_obj, starlette.datastructures.UploadFile):
                data = await form_obj.read()
                data_len = len(data)
                data = BytesIO(data)
                minio_response = minio_client.put_object(bucket_name=MINIO_UPLOAD_BUCKET,
                                                         data=data,
                                                         length=data_len,
                                                         object_name=form_obj.filename)
                uploaded_obj = CachedObject.create_from_minio_response(minio_response)

                uploaded_name = unquote(get_filename_from_mino_key(uploaded_obj.key))
                event_name = convert_filename_to_report_name(uploaded_name)

                events[event_name] = {'event': Event(), 'result': None}

                response.append({'key': uploaded_obj.key, 'etag': uploaded_obj.etag,
                                 'bucket': uploaded_obj.cached_bucket.name, 'subscriptionReportName': event_name})

        return JSONResponse({'uploaded_files': response}, status_code=201)
    return JSONResponse({}, status_code=500)


async def minio_download(request: Request):
    bucket_name = request.query_params.get('bucket_name')
    obj_name = request.query_params.get('object_name')

    file = minio_client.get_object(bucket_name=bucket_name, object_name=obj_name)
    return StreamingResponse(file)


graphql_app = GraphQL(schema)

routes = [
    Mount('/gateway', routes=[
        Route('/graphql', graphql_app),
        WebSocketRoute('/graphql', graphql_app),
        Route('/minio-upload', endpoint=minio_upload, methods=["GET", "POST"]),
        Route('/minio-hook', endpoint=minio_hook, methods=["GET", "HEAD", "POST"]),
        Route('/minio-download', endpoint=minio_download),
    ])
]

middleware = [
    Middleware(CORSMiddleware, allow_headers=["*"], allow_origins=["*"], allow_methods=["*"])
]
minio_client = MinioClient().get_client()

existing_reports = CachedObject.refresh_object_cache_for_bucket(mc=minio_client, bucket_name=MINIO_REPORT_BUCKET)
app = Starlette(routes=routes, middleware=middleware, debug=True)



