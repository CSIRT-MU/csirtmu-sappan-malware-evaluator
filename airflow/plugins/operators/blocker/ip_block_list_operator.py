from hooks.blocker_api.ip_blocker_hook import IPBlockerApiHook
from airflow.models import BaseOperator
from airflow.utils.decorators import apply_defaults
from hooks.whitelist.whitelist_hook import WhitelistHook


class BlockIPListOperator(BaseOperator):
    """
    This operator takes information about domains and tries to blacklist them

    :ip_list: list = list of parameters for blocking [{"ip" : str, "reason" : str, "length" : int}]
    :blocker_conn_id: str = connection ID of Mock API IP blocker Connection
    :whitelist_conn_id: str = connection ID of Mock API IP whitelist Connection
    """

    template_fields = ('ip_list', 'blocker_conn_id', 'whitelist_conn_id')

    @apply_defaults
    def __init__(
            self,
            ip_list,
            blocker_conn_id='blocker_conn_id',
            whitelist_conn_id='whitelist_conn_id',
            **kwargs) -> None:
        super().__init__(**kwargs)
        self.ip_list = ip_list
        self.blocker_conn_id = 'blocker_conn_id'
        self.whitelist_conn_id = 'whitelist_conn_id'

    def is_ip_blacklisted(self, ip, blocker_hook):
        data = blocker_hook.get_ip_blacklist()

        for data_ip in data.results:
            if ip == data_ip.ip:
                return True

        return False

    def is_ip_whitelisted(self, ip, whitelist_hook):
        data = whitelist_hook.get_whitelist()

        for data_ip in data:
            if ip == data_ip['ip']:
                return True

        return False

    def block_ip(self, ip, reason, length, blocker_hook):
        return blocker_hook.ban_ip(ip, reason, length)

    def execute(self, context):
        whitelist_hook = WhitelistHook(self.whitelist_conn_id)
        blocker_hook = IPBlockerApiHook(self.blocker_conn_id)
        ips_output = []
        for ip_record in self.ip_list:
            whitelisted = self.is_ip_whitelisted(
                ip_record['ip'], whitelist_hook)
            blacklisted = self.is_ip_blacklisted(ip_record['ip'], blocker_hook)

            blocked = False
            if not whitelisted and not blacklisted:
                blocker_hook.ban_ip(
                    ip_record['ip'], ip_record['reason'], ip_record['length'])
                blocked = True
            ips_output.append({
                'ip': ip_record['ip'],
                'whitelisted': whitelisted,
                'blacklisted': blacklisted,
                'blocked': blocked
            })

        return ips_output
