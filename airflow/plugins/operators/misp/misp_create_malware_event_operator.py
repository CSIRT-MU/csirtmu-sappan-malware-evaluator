from airflow.models import BaseOperator
from airflow.utils.decorators import apply_defaults
from attr import attr, attributes

from hooks.misp.misp_hook import MISPHook
from airflow.hooks.S3_hook import S3Hook

from pymisp.mispevent import MISPAttribute, MISPEvent
from pymisp.tools.fileobject import FileObject
from io import BytesIO


class MISPCreateMalwareEventOperator(BaseOperator):
    """
    This operator takes result of Observable Evaluator, S3 bucket and creates MISP event with opbject and attributes

    :data: dict = result of Observable Evaluator
    :bucket: str = S3 bucket name
    :conn_id: str = connection ID of  MISP Connection
    :s3_conn_id: str = connection ID of S3 Connection
    """
    template_fields = ('data', 'netflow_data',
                       'conn_id', 's3_conn_id', 'bucket')

    @apply_defaults
    def __init__(
            self,
            data,
            netflow_data,
            bucket='csirt-mu-malware-processed',
            conn_id='misp_conn_id',
            s3_conn_id='s3_conn_id',
            **kwargs) -> None:
        super().__init__(**kwargs)
        self.conn_id = conn_id
        self.data = data
        self.netflow_data = netflow_data
        self.s3_conn_id = s3_conn_id
        self.bucket = bucket

    def prepare_observable_attribute(self,  observable_info):
        misp_attribute = MISPAttribute()

        observable_creator = {
            "ip": lambda observable: {"category": "Network activity", "type": "ip-dst", "value": observable['observable']},
            "domain": lambda observable: {"category": "Network activity", "type": "domain", "value": observable['observable']},
            "url": lambda observable: {"category": "Network activity", "type": "url", "value": observable['observable']}
        }

        def default(_): return None

        if attribute := (observable_creator.get(observable_info['observable_type'], default)(observable_info)):
            misp_attribute.value = attribute["value"]
            misp_attribute.type = attribute["type"]
            misp_attribute.category = attribute["category"]
            return misp_attribute

        return None

    def prepare_netflow_attribute(self, ip):
        misp_attribute = MISPAttribute()
        misp_attribute.value = ip
        misp_attribute.type = 'ip-src'
        misp_attribute.category = 'Network activity'
        return misp_attribute

    def prepare_attributes(self):
        attributes = []
        for observable_info in self.data['observables'].values():
            if observable_info["malicious"] and (attribute := self.prepare_observable_attribute(observable_info)):
                attributes.append(attribute)

        # add IPs which communicated with malicious observables
        ips = self.netflow_data.get('ips', [])
        for ip in ips:
            attributes.append(self.prepare_netflow_attribute(ip[0]))

        return attributes

    def execute(self, context):
        if not self.data['malicious']:
            print("File is not malicious")
            return None
            
        hook = MISPHook(self.conn_id)
        client = hook.get_conn()
        new_event = MISPEvent()
        new_event.info = f"Obtained malware {self.data['filename']}"
        new_event = client.add_event(new_event, pythonify=True)

        s3_client = S3Hook(self.s3_conn_id).get_conn()

        with BytesIO() as f:
            s3_client.download_fileobj(self.bucket, self.data["filename"], f)
            file_object = FileObject(
                pseudofile=f, filename=self.data['filename'])
            client.add_object(new_event, file_object)

        if len(attributes := self.prepare_attributes()) > 0:
            client.add_attribute(new_event, attributes)
        return new_event.id
