from airflow.models import BaseOperator
from airflow.utils.decorators import apply_defaults
from pathlib import Path
from hooks.observable_evaluator.observable_evaluator_hook import ObservableEvaluatorHook
from enum import IntEnum
from tempfile import NamedTemporaryFile
from airflow.hooks.S3_hook import S3Hook
import base64


class ObservableEvaluatorAnalyseFilesOperator(BaseOperator):
    """
    This operator downloads file from S3 and uploads it to Observable Evaluator for file analysis

    Fields:
    :file_key: str = key in S3 bucket
    :bucket: str = S3 bucket name
    :conn_id: str = connection ID of Observable Evaluator Connection
    :s3_conn_id: str = connection ID of S3 Connection

    """

    template_fields = ('file_key', 'conn_id', 'bucket', 's3_conn_id')

    @apply_defaults
    def __init__(self,
                 file_key,
                 conn_id='',
                 bucket='',
                 s3_conn_id='',
                 *args,
                 **kwargs):

        super().__init__(*args, **kwargs)
        self.file_key = file_key
        self.conn_id = conn_id
        self.s3_conn_id = s3_conn_id
        self.bucket = bucket

    def execute(self, context):
        s3_hook = S3Hook(self.s3_conn_id)
        s3_client = s3_hook.get_conn()
        hook = ObservableEvaluatorHook(self.conn_id)
        files = {}
        with NamedTemporaryFile("w+b") as f:
            s3_client.download_fileobj(self.bucket, self.file_key, f)
            f.seek(0, 0)
            files[self.file_key] = f.read()
            if not files[self.file_key] or len(files[self.file_key]) == 0:
                print("Empty file")
                files[self.file_key] = "harmless"

        response = hook.send_files_for_analysis(files)
        # we are working with single file
        return response.json()[0]
