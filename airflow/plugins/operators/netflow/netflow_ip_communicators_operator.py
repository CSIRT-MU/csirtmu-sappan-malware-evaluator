from airflow.models import BaseOperator
from airflow.utils.decorators import apply_defaults
from airflow.providers.postgres.hooks.postgres import PostgresHook

from utils.netflow_sqlalchemy import *

INFO_MSG = 'info_msg'
NFDUMP_TABLE = 'nfdump'


class NetflowCommunicatingIPsOperator(BaseOperator):
    """Apache Airflow operator which queries nfdump netflow database to retrieve data about IPs which communicated with
    malicious observables found by observable evaluator
    """

    template_fields = ('data', 'conn_id')

    @apply_defaults
    def __init__(
            self,
            data,
            conn_id='postgres_netflow_conn',
            **kwargs) -> None:
        super().__init__(**kwargs)
        self.conn_id = conn_id
        self.data = data

    def filter_malicious_ips(self):
        observables = self.data['observables']
        # print(observables)
        ips = []
        for key, val in observables.items():
            if val['malicious'] and val['observable_type'] == 'ip':
                ips.append(val['observable'])
        return ips

    def get_communicators(self):
        query = NetflowQuery(table=NFDUMP_TABLE, cols=['source_ip', 'dest_ip', ('start', 'min')], filters=[
                             ('in', ('dest_ip', self.ips))], groupby=['source_ip', 'dest_ip'], ascending=False)
        communicating_ips = self.db_session.run_query(query)
        communicating_ips = list(
            map(lambda x: (x[0], x[1], str(x[2])), communicating_ips))
        return communicating_ips

    def get_most_frequent_value(self, col):
        query = NetflowQuery(table=NFDUMP_TABLE, cols=[col, ('source_ip', 'count')], filters=[
                             ('in', ('dest_ip', self.ips))], groupby=[col], ascending=False, limit=10)
        result = self.db_session.run_query(query)
        # print(result)
        return result[0][0] if len(result) != 0 else None

    def get_most_frequent_port(self):
        return self.get_most_frequent_value('source_port')

    def get_most_frequent_protocol(self):
        return self.get_most_frequent_value('protocol')

    def get_average_flow_duration(self):
        query = NetflowQuery(table=NFDUMP_TABLE, cols=[('duration', 'avg')], filters=[
                             ('in', ('dest_ip', self.ips))])
        result = self.db_session.run_query(query)
        # print(result)
        return round(float(result[0][0]), 3) if len(result) != 0 else None

    def get_total_stat(self, col):
        query = NetflowQuery(table=NFDUMP_TABLE, cols=[(col, 'sum')], filters=[
                             ('in', ('dest_ip', self.ips))])
        result = self.db_session.run_query(query)
        # print(result)
        return float(result[0][0]) if len(result) != 0 else None

    def get_total_bytes(self):
        return self.get_total_stat('bytes')

    def get_total_flows(self):
        return self.get_total_stat('flows')

    def build_netflow_report(self):
        if len(self.ips) == 0:
            return {INFO_MSG: 'No IP addresses evaluated as malicious.'}
        else:
            report = {}
            report['ips'] = self.get_communicators()
            if len(report['ips']) == 0:
                return {INFO_MSG: 'No communication with any of the malicious IPs observed in the netflow data.'}
            else:
                stats = {}
                stats['Most frequently used port'] = self.get_most_frequent_port()
                stats['Most frequently used protocol'] = self.get_most_frequent_protocol()
                stats['Average flow duration'] = self.get_average_flow_duration()
                stats['Total bytes transferred'] = self.get_total_bytes()
                stats['Total number of flows'] = self.get_total_flows()

                report['stats'] = stats
                return report

    def execute(self, context):
        self.hook = PostgresHook(self.conn_id)
        self.engine = self.hook.get_sqlalchemy_engine()
        self.db_session = DatabaseSession(engine=self.engine)
        self.ips = self.filter_malicious_ips()
        return self.build_netflow_report()
