from hooks.dnsrpz_api.dnsrpz_hook import DNSRPZHook
from airflow.models import BaseOperator
from airflow.utils.decorators import apply_defaults


class DNSRPZBlockDomainsOperator(BaseOperator):
    """
    This operator takes information about domains and tries to blacklist them

    :domain_list: list = list of parameters for blocking [{"domain" : str, "reason" : str}]
    :conn_id: str = connection ID of Mock API DNS blocker Connection

    """

    template_fields = ('domain_list', 'conn_id')

    @apply_defaults
    def __init__(
            self,
            domain_list,
            conn_id='dnsrpz_conn_id',
            **kwargs) -> None:
        super().__init__(**kwargs)
        self.domain_list = domain_list
        self.conn_id = conn_id

    def is_whitelisted(self, domain):
        hook = DNSRPZHook(self.conn_id)
        whitelist = hook.get_whitelist()

        whitelisted = False

        for record in whitelist:
            if domain in record:
                whitelisted = True
                break

        return whitelisted

    def is_blacklisted(self, domain):
        hook = DNSRPZHook(self.conn_id)

        blacklist = hook.get_blacklist()
        blacklisted = False

        for record in blacklist:
            if domain in record:
                blacklisted = True
                break

        return blacklisted

    def block_domain(self, domain, reason, blacklisted, whitelisted):
        hook = DNSRPZHook(self.conn_id)
        if not blacklisted and not whitelisted:
            print("Adding new record")
            hook.add_to_blacklist(domain, reason)
            return True
        return False

    def execute(self, context):
        domains_output = []
        print(self.domain_list)
        for domain_record in self.domain_list:
            print(domain_record)
            whitelisted = self.is_whitelisted(domain_record['domain'])
            blacklisted = self.is_blacklisted(domain_record['domain'])
            status = self.block_domain(
                domain_record['domain'], domain_record['reason'], blacklisted, whitelisted)
            domains_output.append({**domain_record,
                                   'blacklisted': blacklisted,
                                   'whitelisted': whitelisted,
                                   'blocked': status
                                   })

        return domains_output
