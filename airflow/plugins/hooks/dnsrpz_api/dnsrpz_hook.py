from dnsrpz_api_mock_swagger_client.api.domain_blacklist_api import DomainBlacklistApi
from dnsrpz_api_mock_swagger_client.api_client import ApiClient
from dnsrpz_api_mock_swagger_client.configuration import Configuration
from airflow.hooks.base_hook import BaseHook
from urllib.parse import unquote

class DNSRPZHook(BaseHook):

    def __init__(self, conn_id):
        self._conn_id = conn_id
        self._base_url = None
        self._connection = None

    def get_conn(self):
        """
        return connection uri to dnsrpz
        """
        if self._connection is not None:
            return self._connection

        config = Configuration()
        config.host = self.get_uri()
        config.verify_ssl = False

        apiclient = ApiClient(config)

        self._connection = DomainBlacklistApi(apiclient)
        return self._connection

    def get_uri(self):
        """
        return connection uri to dnsrpz
        """
        config = self.get_connection(self._conn_id)
        uri = config.get_uri()
        if (config.conn_type == 'http' and config.port == 443):
            uri = uri.replace('http://','https://')
        return unquote(uri)


    def get_blacklist(self):
        """
        returns blacklist
        """
        connection = self.get_conn()
        data = connection.get_list(action="list", zone="black")
        return data.result

    def get_whitelist(self):
        """
        returns whitelist
        """
        connection = self.get_conn()
        data = connection.get_list(action="list", zone="white")
        return data.result

    def add_to_blacklist(self, domain, reason=None):
        """
        blacklists domain
        """
        connection = self.get_conn()
        connection.get_list(action="add", zone="black", domain=domain, reason=reason)

    def add_to_whitelist(self, domain, reason=None):
        """
        blacklists domain
        """
        connection = self.get_conn()
        connection.get_list(action="add", zone="white", domain=domain, reason=reason)
