from airflow.hooks.base_hook import BaseHook
from blocker_api_mock_swagger_client.api.email_api import EmailApi
from blocker_api_mock_swagger_client.api_client import ApiClient
from blocker_api_mock_swagger_client.configuration import Configuration
from blocker_api_mock_swagger_client.models.email_add_record import EmailAddRecord
from urllib.parse import unquote


class EmailBlockerApiHook(BaseHook):

    def __init__(self, conn_id):
        self._conn_id = conn_id
        self._base_url = None
        self._connection = None

    def get_conn(self):
        """
        return connection uri to dnsrpz
        """
        if self._connection is not None:
            return self._connection
        config = Configuration()
        config.host = self.get_uri()
        config.verify_ssl = False

        apiclient = ApiClient(config)

        self._connection = EmailApi(apiclient)
        return self._connection

    def get_uri(self):
        """
        return connection uri to dnsrpz
        """
        config = self.get_connection(self._conn_id)
        uri = config.get_uri()
        if (config.conn_type == 'http' and config.port == 443):
            uri = uri.replace('http://','https://')
        return unquote(uri)

    def get_email_blacklist(self):
        """
        returns blacklist
        """
        connection = self.get_conn()
        data = connection.list_email()
        return data

    def ban_email(self, email, reason="", length=0, who="csirt"):
        """
        ban email address
        """
        connection = self.get_conn()
        params = EmailAddRecord(email=email, length=length, reason=reason, who=who)
        connection.emails_post(body=params)
