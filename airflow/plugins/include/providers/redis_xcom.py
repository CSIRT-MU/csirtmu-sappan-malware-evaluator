# This is an example to show how easy to extend the custom XCom backends in Apache Airflow. 
# Based on: https://gist.github.com/msumit/1bc995c4a21acb257a39c36f0279e3d6 by Sumit Maheshwari

import json
import logging
from typing import Any
import uuid
from os import getenv

from airflow.configuration import conf
from airflow.models.xcom import BaseXCom
from airflow.models.connection import Connection
from airflow import settings
from datetime import timedelta

log = logging.getLogger(__name__)
REDIS_CONN_ID="redis_xcom_conn_id"


class RedisXCom(BaseXCom):

    @staticmethod
    def get_connection():
        from airflow.providers.redis.hooks.redis import RedisHook
        try:
            Connection.get_connection_from_secrets(REDIS_CONN_ID)
        except:
            conn = Connection(
                conn_id=REDIS_CONN_ID,
                conn_type="redis",
                host=getenv("REDIS_HOSTNAME"),
                port=getenv("REDIS_PORT"),
                password=getenv("REDIS_PASSWORD")
            )
            session = settings.Session()
            session.add(conn)
            session.commit()

        return RedisHook(REDIS_CONN_ID)



    @classmethod
    def delete(cls, xcom):
        """Delete XCom value from Redis"""
        redis_hook = RedisXCom.get_connection()
        result = redis_hook.get_conn().delete(xcom.value)
        log.debug("Result of deleting key to Redis %s", result)

    @staticmethod
    def serialize_value(value: Any):
        """Serialize the data as JSON, store into Redis & return the key"""
        val = json.dumps(value).encode('UTF-8')
        key = uuid.uuid4().hex
        redis_hook = RedisXCom.get_connection()

        log.debug('Setting XCom key %s to Redis', key)
        result = redis_hook.get_conn().setex(key, timedelta(hours=1), val)
        log.debug('Result of publishing to Redis %s', result)
        return BaseXCom.serialize_value(key)

    @staticmethod
    def deserialize_value(result: "XCom") -> Any:
        redis_hook = RedisXCom.get_connection()
        result = redis_hook.get_conn().get(result.value.decode().strip('"'))
        return json.loads(result.decode('UTF-8')) if result is not None \
            else '** XCom not found in Redis **'