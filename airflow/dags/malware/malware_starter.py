import logging
from datetime import datetime, timedelta
from os import wait

from airflow.decorators import dag, task
from airflow.operators.python import get_current_context

from airflow.sensors.s3_key_sensor import S3KeySensor
from airflow.providers.amazon.aws.operators.s3_list import S3ListOperator
from airflow.providers.amazon.aws.operators.s3_bucket import S3CreateBucketOperator
from airflow.operators.dagrun_operator import TriggerDagRunOperator

from utils.xcom import cleanup_xcom
from malware.malware_pipeline import malware_dag


MINIO_CONN_ID = 's3_conn_id'
S3_BUCKET_MALWARE = 'csirt-mu-malware'
S3_BUCKET_PROCESSED = 'csirt-mu-malware-processed'
S3_BUCKET_REPORTS = 'csirt-mu-reports'
INTELOWL_CONN_ID = 'intelowl_conn_id'

docs = """
### Malware Starter

This DAG represents a trigger over S3 Bucker and starter of Malware Pipeline
"""


@dag(
    default_args={
        'owner': 'airflow',
        'start_date': datetime.fromtimestamp(0),
        'depends_on_past': False,
        'retries': 2,
        'retry_delay': timedelta(minutes=2)

    },
    description='Malware - pipeline automatic handling',
    schedule_interval="* * * * *",
    max_active_runs=1,
    doc_md=docs
    #    on_success_callback=cleanup_xcom,
)
def malware_starter_dag():
    check_if_malware_bucket_exists = S3CreateBucketOperator(
        task_id="check_if_malware_bucket_exists",
        bucket_name=S3_BUCKET_MALWARE,
        aws_conn_id=MINIO_CONN_ID
    )
    check_if_processing_bucket_exists = S3CreateBucketOperator(
        task_id="check_if_processing_bucket_exists",
        bucket_name=S3_BUCKET_PROCESSED,
        aws_conn_id=MINIO_CONN_ID
    )
    check_if_reports_bucket_exists = S3CreateBucketOperator(
        task_id="check_if_reports_bucket_exists",
        bucket_name=S3_BUCKET_REPORTS,
        aws_conn_id=MINIO_CONN_ID
    )

    check_for_new_files = S3KeySensor(
        task_id='check_for_file',
        aws_conn_id=MINIO_CONN_ID,
        bucket_name=S3_BUCKET_MALWARE,
        wildcard_match=True,
        verify=False,
        bucket_key='*',
        poke_interval=20
    )

    get_new_files_names = S3ListOperator(
        task_id='check_new_files',
        aws_conn_id=MINIO_CONN_ID,
        bucket=S3_BUCKET_MALWARE
    )

    @task
    def trigger_malware_pipeline_per_file(files):
        counter = 1
        context = get_current_context()
        for file in files:
            trigger_dag = TriggerDagRunOperator(
                task_id='trigger_malware_pipeline_for_'+str(counter),
                trigger_dag_id=malware_dag().dag_id,
                conf={"file_name": file, "s3": True},
                #                wait_for_completion=True
            )
            counter += 1
            trigger_dag.execute(context)

    trigger_malware_pipeline_per_file(get_new_files_names.output)

    [check_if_malware_bucket_exists, check_if_processing_bucket_exists,
        check_if_reports_bucket_exists] >> check_for_new_files >> get_new_files_names


dag = malware_starter_dag()
