import logging
from datetime import datetime, timedelta
import json

from airflow.decorators import dag, task

from airflow.operators.dummy import DummyOperator
from airflow.operators.python import BranchPythonOperator
from airflow.operators.python import get_current_context

from airflow.providers.redis.hooks.redis import RedisHook


from operators.dnsrpz.dnsrpz_block_domains_operator import DNSRPZBlockDomainsOperator

logger = logging.getLogger("airflow.task")

docs = """
## DNSRPZ Block multiple domains

Input format:

```
{
    "domains": [
        {
            "domain": "example.com",
            "reason": "example reason"
        }
    ],
}
```
"""


def setup_notification_services(**kwargs):
    services = {
        "redis": "push_result_to_redis"
    }
    branch_to = [services.get(key, None) for key in kwargs.keys(
    ) if key in services and kwargs[key]]
    if not branch_to:
        return 'end_without_notifying'
    return branch_to


# CONNECTIONS
DNSRPZ_CONN_ID = 'dnsrpz_conn_id'
REDIS_CONN_ID = 'redis_xcom_conn_id'


@dag(
    default_args={
        'owner': 'airflow',
        'depends_on_past': False,
        'retries': 0,
        'start_date': datetime.fromtimestamp(0)
    },
    doc_md=docs,
    schedule_interval=None,
)
def block_multiple_domains():
    @task(multiple_outputs=True)
    def parse_params():
        dag_params = get_current_context()["dag_run"].conf
        params = {}

        params["domain_list"] = dag_params.get("domains", [])
        params["redis"] = dag_params.get("redis_key", None)

        return params

    params = parse_params()
    block_domains = DNSRPZBlockDomainsOperator(
        task_id='block_domains',
        domain_list=params['domain_list'],
        conn_id=DNSRPZ_CONN_ID
    )

    check_notification = BranchPythonOperator(
        task_id='setup_notification_services',
        python_callable=setup_notification_services,
        op_kwargs={"redis": params["redis"]}
    )

    no_notify = DummyOperator(
        task_id='end_without_notifying',
    )

    @task
    def push_result_to_redis(block_information, redis_key):
        hook = RedisHook(REDIS_CONN_ID)
        client = hook.get_conn()
        client.setex(redis_key, timedelta(hours=1),
                     json.dumps(block_information))
        return redis_key

    block_domains
    check_notification >> [no_notify, push_result_to_redis(
        block_domains.output, params["redis"])]


dag = block_multiple_domains()
