import asyncio
import os
import strawberry

from minio import Minio
from csirtmu.observable_evaluator.analyser.intelowl_client import IntelOwlClient
from aiofiles.tempfile import NamedTemporaryFile as AsyncNamedTemporaryFile


@strawberry.type
class Report:
    file_name: str
    malicious: bool


@strawberry.type
class Query:
    @strawberry.field
    def hello(self) -> str:
        print("STARTING THIS QUERY")
        return "world"

# testing query
    @strawberry.field
    async def check_report(self, s3_key: str) -> Report:
        INTELOWL_HOST = os.environ.get(
            "INTELOWL_HOST", "http://localhost:9003")
        INTELOWL_API_KEY = os.environ.get(
            "INTEL_OWL_KEY", "11235813213455891442333776109870")
        minio_client = Minio(
            "localhost:9000",
            access_key="minioadmin",
            secret_key="minioadmin",
            secure=False
        )
        async with AsyncNamedTemporaryFile("w+b") as tmp_file:
            result = await tmp_file.write(minio_client.get_object("csirtmu-malware", s3_key, tmp_file.name).read())
            await tmp_file.seek(0, 0)
            client = IntelOwlClient(INTELOWL_API_KEY, INTELOWL_HOST)
            result = await client.analyze_file(s3_key, tmp_file)
        response = Report(
            file_name=result["file_name"], malicious=result["malicious"])
        return response


@strawberry.type
class Subscription:
    @strawberry.subscription
    async def count(self, target: int = 100) -> int:
        print("SUBSCRIPTION STARTING")
        for i in range(target):
            yield i
            await asyncio.sleep(0.5)


schema = strawberry.Schema(query=Query, subscription=Subscription)
