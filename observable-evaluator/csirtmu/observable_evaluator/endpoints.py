import os
import asyncio
from starlette.requests import Request
from starlette.responses import JSONResponse
from starlette.datastructures import UploadFile
from csirtmu.observable_evaluator.analyser.intelowl_client import IntelOwlClient


INTELOWL_HOST = os.environ.get("INTELOWL_HOST", "http://intelowl:80")
INTELOWL_API_KEY = os.environ.get(
    "INTEL_OWL_KEY", "11235813213455891442333776109870")


async def check_files(request: Request):
    if request.method.upper() == "GET":
        return JSONResponse({"Status": "OK"}, status_code=200)

    if request.method.upper() == "POST":
        client = IntelOwlClient(INTELOWL_API_KEY, INTELOWL_HOST)
        form = dict(await request.form())
        raw = form.pop("raw", False)
        detected = form.pop("detected", "manually")

        results = await asyncio.gather(*[client.analyze_file(name, form_obj, raw=raw, detected=detected)for name, form_obj in form.items() if isinstance(form_obj, UploadFile)])
        results = [result.to_dict() for result in results]
        return JSONResponse(results, status_code=201)
    return JSONResponse({}, status_code=500)


async def check_observables(request: Request):
    if request.method.upper() == "GET":
        return JSONResponse({"Status": "OK"}, status_code=200)

    if request.method.upper() == "POST":
        client = IntelOwlClient(INTELOWL_API_KEY, INTELOWL_HOST)
        body = await request.json()
        if not (observables := body.pop("observables", None)):
            return JSONResponse({"error": "Missing \"observables\" array with observables to analyze!"}, status_code=400)
        results = await asyncio.gather(*[client.analyze_observable(observable, **body) for observable in observables])
        results = [result.to_dict() for result in results]
        return JSONResponse(results, status_code=201)
    return JSONResponse({}, status_code=500)
