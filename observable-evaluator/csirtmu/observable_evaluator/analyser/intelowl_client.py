import asyncio
from os import environ
from pyintelowl import IntelOwl
from csirtmu.observable_evaluator.utils import Singleton
from csirtmu.observable_evaluator.analyser.complex_report_analyser import ComplexReportAnalyser


DEFAULT_FILE_ANALYZERS = "File_Info"
DEFAULT_OBSERVABLE_ANALYZERS = ""

FILE_ANALYZERS = environ.get(
    "FILE_ANALYZERS", DEFAULT_FILE_ANALYZERS).split(",")
OBSERVABLE_ANALYZERS = environ.get(
    "OBSERVABLE_ANALYZERS", DEFAULT_OBSERVABLE_ANALYZERS).split(",")


# SINGLETON WRAPPER OVER INTELOWL
class IntelOwlClient(IntelOwl, metaclass=Singleton):

    async def analyze_file(self, name, file, file_analyzers=FILE_ANALYZERS, raw=False, detected="manually"):
        if ("File_Info" not in FILE_ANALYZERS):
            FILE_ANALYZERS.append("File_Info")

        data = await file.read()
        job = self.send_file_analysis_request(file_analyzers, name, data)
        job_info = {}
        timeout = 600
        step = 5
        while(timeout > 0):
            job_info = self.get_job_by_id(job["job_id"])
            if job_info["status"] != "running":
                break
            await asyncio.sleep(step)
            timeout -= step
        return await self.evaluate_file_reports(job_info, raw=raw, detected=detected)

    async def analyze_observable(self, observable, observable_analyzers=OBSERVABLE_ANALYZERS, detected="manually", raw=False):
        job = self.send_observable_analysis_request(
            observable_analyzers, observable)
        job_info = {}
        timeout = 600
        step = 5
        while(timeout > 0):
            job_info = self.get_job_by_id(job["job_id"])
            if job_info["status"] != "running":
                break
            await asyncio.sleep(step)
            timeout -= step
        return await self.evaluate_observable_reports(job_info, detected=detected, raw=raw)

    async def evaluate_file_reports(self, analysis_result, detected="manually", raw=False):
        analyser = ComplexReportAnalyser()
        results = analyser.analyse_file(
            analysis_result, detected=detected, raw=raw)
        analysed_observables = await asyncio.gather(*[self.analyze_observable(
            observable_name, detected=observable.detected, raw=raw)
            for observable_name, observable
            in results.observables.items()
        ]
        )
        results.observables = dict(
            zip(results.observables, analysed_observables))
        return results

    async def evaluate_observable_reports(self, analysis_result, detected="API", raw=False):
        detected = detected if isinstance(detected, list) else [detected]
        analyser = ComplexReportAnalyser()
        results = analyser.analyse_observable(
            analysis_result, detected=detected, raw=raw)

        return results
