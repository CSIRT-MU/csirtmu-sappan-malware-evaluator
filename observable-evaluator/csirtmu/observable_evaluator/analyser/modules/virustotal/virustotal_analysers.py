from typing import Tuple

from csirtmu.observable_evaluator.analyser.intel_owl_report import IntelOwlReport
from csirtmu.observable_evaluator.analyser.abstract_analysers import AbstractFileAnalyser, AbstractObservableAnalyser
from csirtmu.observable_evaluator.analyser.analysis_result import FileAnalysis, ObservableAnalysis

from .reports.virus_total_file_report import VirusTotalFileReport
from .reports.virustotal_observable_report import VirusTotalObservableReport


class VirusTotalFileAnalyser(AbstractFileAnalyser):
    def check_if_malicious(self, report) -> Tuple[bool, int]:
        is_malicious = True
        score = 100  # TODO

        if (report.data.attributes.reputation >= 0):
            malicious = report.data.attributes.last_analysis_stats["malicious"] + \
                report.data.attributes.last_analysis_stats["suspicious"]
            harmless = report.data.attributes.last_analysis_stats["harmless"] + \
                report.data.attributes.last_analysis_stats["undetected"]
            if (harmless > malicious or malicious == 0):
                is_malicious = False
                score = 0

        return (is_malicious, score)

    def collect_observables(self, report):
        observables = {}

        for record in report.data.relationships.contacted_ips:
            new_record = ObservableAnalysis(
                observable=record.value, observable_type="ip", detected=["VirusTotal"])
            observables.update({record.value: new_record})

        for record in report.data.relationships.contacted_domains:
            new_record = ObservableAnalysis(
                observable=record.value, observable_type="domain", detected=["VirusTotal"])
            observables.update({record.value: new_record})

        for record in report.data.relationships.contacted_urls:
            new_record = ObservableAnalysis(
                observable=record.value, observable_type="url", detected=["VirusTotal"])
            observables.update({record.value: new_record})

        return observables

    def analyse(self, intelowl_report: IntelOwlReport[VirusTotalFileReport],
                **kwargs) -> FileAnalysis:
        malicious, score = self.check_if_malicious(intelowl_report.report)
        analysis = {
            "malicious": malicious,
            "filename": "",
            "score": score,
        }

        if kwargs.get("raw", False):
            analysis["raw"] = intelowl_report

        if detected := kwargs.get("detected", None):
            analysis["detected"] = detected

        analysis["observables"] = self.collect_observables(
            intelowl_report.report)
        analysis["aliases"] = intelowl_report.report.data.attributes.names

        return FileAnalysis(**analysis)


class VirusTotalObservableAnalyser(AbstractObservableAnalyser):

    def check_if_malicious(self, report) -> Tuple[bool, int]:
        is_malicious = True
        score = 100  # TODO

        if (report.data.attributes.reputation >= 0):
            malicious = report.data.attributes.last_analysis_stats["malicious"] + \
                report.data.attributes.last_analysis_stats["suspicious"]
            harmless = report.data.attributes.last_analysis_stats["harmless"] + \
                report.data.attributes.last_analysis_stats["undetected"]
            if (harmless > malicious or malicious == 0):
                is_malicious = False
                score = 0

        return (is_malicious, score)

    def analyse(self, intelowl_report: IntelOwlReport[VirusTotalObservableReport], **kwargs) -> ObservableAnalysis:
        malicious, score = self.check_if_malicious(intelowl_report.report)
        analysis = {
            "malicious": malicious,
            "observable": intelowl_report.report.data.id,
            "score": score,
        }

        if kwargs.get("raw", False):
            analysis["raw"] = intelowl_report

        if detected := kwargs.get("detected", None):
            analysis["detected"] = detected

        return ObservableAnalysis(**analysis)
