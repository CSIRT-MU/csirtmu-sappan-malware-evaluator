from csirtmu.observable_evaluator.analyser.intel_owl_report import IntelOwlReport
from csirtmu.observable_evaluator.analyser.abstract_analysers import AbstractFileAnalyser, AbstractObservableAnalyser
from csirtmu.observable_evaluator.analyser.analysis_result import FileAnalysis, ObservableAnalysis

from .reports.otx_alient_vault_report import OTXAlienVaultReport


class OTXAlienVaultObservableAnalyser(AbstractObservableAnalyser):

    def analyse(self, intelowl_report: IntelOwlReport[OTXAlienVaultReport], **kwargs) -> ObservableAnalysis:
        malicious = len(intelowl_report.report.pulses) > 0
        analysis = {
            "malicious": malicious,
            "observable": "",
            "score": 100 if malicious else 0,
        }

        if kwargs.get("raw", False):
            analysis["raw"] = intelowl_report

        if detected := kwargs.get("detected", None):
            analysis['detected'] = detected

        return ObservableAnalysis(**analysis)


class OTXAlienVaultFileAnalyser(AbstractFileAnalyser):
    def analyse(self, intelowl_report: IntelOwlReport[OTXAlienVaultReport],
                **kwargs) -> FileAnalysis:
        malicious = len(intelowl_report.report.pulses) > 0
        analysis = {
            "malicious": malicious,
            "filename": "",
            "score": 100 if malicious else 0,
        }

        if kwargs.get("raw", False):
            analysis["raw"] = intelowl_report

        if detected := kwargs.get("detected", None):
            analysis['detected'] = detected

        return FileAnalysis(**analysis)
