from csirtmu.observable_evaluator.analyser.intel_owl_report import IntelOwlReport
from csirtmu.observable_evaluator.analyser.abstract_analysers import AbstractFileAnalyser, AbstractObservableAnalyser
from csirtmu.observable_evaluator.analyser.analysis_result import FileAnalysis, ObservableAnalysis

from .reports.hybrid_analysis_file_report import HybridAnalysisFileReport
from .reports.hybrid_analysis_observable_report import HybridAnalysisObservableReport


class HybridAnalysisFileAnalyser(AbstractFileAnalyser):

    def collect_aliases(self, reports):
        aliases = set()
        for report in reports:
            if report.verdict == 'malicious':
                aliases.update(
                    [submission.filename for submission in report.submissions])
        return list(aliases)

    def collect_observables(self, reports):
        observables = {}

        for report in reports:
            if report.verdict == 'malicious':
                for domain in report.domains:
                    if domain not in observables:
                        record = ObservableAnalysis(
                            observable=domain, observable_type="domain", detected=["HybridAnalysis"])
                        observables.update({domain: record})
        return observables

    def analyse(self, intelowl_report: IntelOwlReport[HybridAnalysisFileReport], **kwargs) -> FileAnalysis:
        malicious = any(report.verdict ==
                        'malicious' for report in intelowl_report.report)
        analysis = {
            "malicious": malicious,
            "filename": "",
            "score": 100 if malicious else 0,
        }

        if kwargs.get("raw", False):
            analysis["raw"] = intelowl_report

        if detected := kwargs.get("detected", None):
            analysis['detected'] = detected

        analysis['aliases'] = self.collect_aliases(intelowl_report.report)
        analysis['observables'] = self.collect_observables(
            intelowl_report.report)

        return FileAnalysis(**analysis)


class HybridAnalysisObservableAnalyser(AbstractObservableAnalyser):

    def analyse(self, intelowl_report: IntelOwlReport[HybridAnalysisObservableReport], **kwargs) -> ObservableAnalysis:
        malicious = intelowl_report.report.count > 0
        analysis = {
            "malicious": malicious,
            "observable": "",
            "score": 100 if malicious else 0,
        }

        if kwargs.get("raw", False):
            analysis["raw"] = intelowl_report

        if detected := kwargs.get("detected", None):
            analysis["detected"] = detected

        return ObservableAnalysis(**analysis)
