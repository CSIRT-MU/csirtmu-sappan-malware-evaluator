from dataclasses import dataclass

from dataclasses_json.api import dataclass_json


from dataclasses_json.undefined import Undefined
from dataclasses_json.api import dataclass_json
from dataclasses import dataclass
from typing import List, TypeVar, Generic

T = TypeVar("T")


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclass
class IntelOwlReport(Generic[T]):
    name: str
    errors: List[str]
    report: T
    success: bool
    process_time: float
    started_time: float
    started_time_str: str

    @classmethod
    def from_data(cls, cls_type: T, analysis_report: dict) -> "IntelOwlReport[T]":
        instantiated_report = dict(**analysis_report)
        if analysis_report['success']:
            if isinstance(instantiated_report['report'], List):
                instantiated_report['report'] = [cls_type.from_dict(
                    report) for report in instantiated_report['report']]
            else:
                instantiated_report['report'] = cls_type.from_dict(
                    instantiated_report['report'])
        else:
            print("error")
        return cls[cls_type].from_dict(instantiated_report)
